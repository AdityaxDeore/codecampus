import React, { useState } from 'react';
import { Helmet } from 'react-helmet';
import { useNavigate } from 'react-router-dom';
import Icon from '../../components/AppIcon';
import Button from '../../components/ui/Button';
import Input from '../../components/ui/Input';
import Select from '../../components/ui/Select';
import { signInWithGoogle, signInWithMicrosoft } from '../../utils/auth';

const Login = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const [activeTab, setActiveTab] = useState('manual'); // 'manual' or 'oauth'
  const [authMode, setAuthMode] = useState('signup'); // 'signup' or 'signin'
  
  // Form state for manual login/signup
  const [formData, setFormData] = useState({
    email: '',
    name: '',
    branch: '',
    password: '',
    confirmPassword: ''
  });

  // Branch options
  const branchOptions = [
    { value: '', label: 'Select Branch' },
    { value: 'computer-engineering', label: 'Computer Engineering' },
    { value: 'information-technology', label: 'Information Technology' },
    { value: 'electronics-telecom', label: 'Electronics & Telecommunication' },
    { value: 'mechanical-engineering', label: 'Mechanical Engineering' },
    { value: 'civil-engineering', label: 'Civil Engineering' },
    { value: 'electrical-engineering', label: 'Electrical Engineering' },
    { value: 'instrumentation-control', label: 'Instrumentation & Control' },
    { value: 'automobile-engineering', label: 'Automobile Engineering' },
    { value: 'artificial-intelligence', label: 'Artificial Intelligence & Data Science' },
    { value: 'other', label: 'Other' }
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.email.trim()) {
      newErrors.email = 'Email/PRN/Roll No is required';
    } else if (!formData.email.includes('@') && !/^[0-9]+$/.test(formData.email.trim())) {
      newErrors.email = 'Please enter a valid email or PRN/Roll No';
    }
    
    if (authMode === 'signup') {
      if (!formData.name.trim()) {
        newErrors.name = 'Name is required';
      } else if (formData.name.trim().length < 2) {
        newErrors.name = 'Name must be at least 2 characters';
      }
      
      if (!formData.branch) {
        newErrors.branch = 'Please select your branch';
      }
      
      if (!formData.password) {
        newErrors.password = 'Password is required';
      } else if (formData.password.length < 6) {
        newErrors.password = 'Password must be at least 6 characters';
      }
      
      if (!formData.confirmPassword) {
        newErrors.confirmPassword = 'Please confirm your password';
      } else if (formData.password !== formData.confirmPassword) {
        newErrors.confirmPassword = 'Passwords do not match';
      }
    } else {
      // Sign in only requires email and password
      if (!formData.password) {
        newErrors.password = 'Password is required';
      }
    }
    
    return newErrors;
  };

  const handleManualLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setErrors({});
    
    const validationErrors = validateForm();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      setIsLoading(false);
      return;
    }
    
    try {
      // Here you would typically send the data to your backend
      // Process authentication with provided form data
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // For now, just navigate to dashboard
      navigate('/student-dashboard');
    } catch (error) {
      setErrors({ general: `${authMode === 'signup' ? 'Sign up' : 'Sign in'} failed. Please try again.` });
    } finally {
      setIsLoading(false);
    }
  };

  const handleAuthModeChange = (mode) => {
    setAuthMode(mode);
    setErrors({});
    // Clear form data when switching modes
    setFormData({
      email: '',
      name: '',
      branch: '',
      password: '',
      confirmPassword: ''
    });
  };

  const handleGoogleLogin = async () => {
    setIsLoading(true);
    setErrors({});
    try {
      const { provider } = await signInWithGoogle();
      if (provider) navigate('/student-dashboard');
    } catch (e) {
      setErrors({ google: 'Google login failed. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleMicrosoftLogin = async () => {
    setIsLoading(true);
    setErrors({});
    try {
      const { provider } = await signInWithMicrosoft();
      if (provider) navigate('/student-dashboard');
    } catch (e) {
      setErrors({ microsoft: 'Microsoft login failed. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <Helmet>
        <title>Login - CodeCampus</title>
        <meta name="description" content="Login to CodeCampus with your college email address" />
      </Helmet>

      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-emerald-50 flex items-center justify-center">
        <div className="absolute inset-0 bg-grid-pattern opacity-5"></div>
        
        <div className="relative w-full max-w-md mx-4">
          <div className="text-center mb-8">
            <a href="/homepage" className="inline-flex items-center space-x-3 mb-6">
              <div className="relative">
                <svg
                  width="48"
                  height="48"
                  viewBox="0 0 32 32"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  className="academic-transition hover:scale-105"
                >
                  <rect width="32" height="32" rx="8" fill="var(--color-primary)" />
                  <path d="M8 12L16 8L24 12V20C24 21.1046 23.1046 22 22 22H10C8.89543 22 8 21.1046 8 20V12Z" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                  <path d="M12 16L16 14L20 16" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                </svg>
              </div>
              <div>
                <h1 className="text-2xl font-bold text-primary">CodeCampus</h1>
              </div>
            </a>
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {authMode === 'signup' ? 'Create Account' : 'Welcome Back'}
            </h2>
            <p className="text-gray-600">
              {authMode === 'signup' 
                ? 'Join CodeCampus with your college details' 
                : 'Sign in to your CodeCampus account'
              }
            </p>
          </div>

          <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-8">
            {/* Tab Navigation */}
            <div className="flex mb-6 bg-gray-100 rounded-lg p-1">
              <button
                onClick={() => setActiveTab('manual')}
                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                  activeTab === 'manual'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Manual Login
              </button>
              <button
                onClick={() => setActiveTab('oauth')}
                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                  activeTab === 'oauth'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                OAuth Login
              </button>
            </div>

          <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-8">
            {/* Tab Navigation */}
            <div className="flex mb-6 bg-gray-100 rounded-lg p-1">
              <button
                onClick={() => setActiveTab('manual')}
                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                  activeTab === 'manual'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Manual {authMode === 'signup' ? 'Sign Up' : 'Sign In'}
              </button>
              <button
                onClick={() => setActiveTab('oauth')}
                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                  activeTab === 'oauth'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                OAuth Login
              </button>
            </div>

            {/* Sign Up / Sign In Toggle for Manual Tab */}
            {activeTab === 'manual' && (
              <div className="flex mb-6 bg-blue-50 rounded-lg p-1">
                <button
                  onClick={() => handleAuthModeChange('signup')}
                  className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                    authMode === 'signup'
                      ? 'bg-white text-blue-600 shadow-sm'
                      : 'text-blue-600 hover:text-blue-800'
                  }`}
                >
                  Sign Up
                </button>
                <button
                  onClick={() => handleAuthModeChange('signin')}
                  className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                    authMode === 'signin'
                      ? 'bg-white text-blue-600 shadow-sm'
                      : 'text-blue-600 hover:text-blue-800'
                  }`}
                >
                  Sign In
                </button>
              </div>
            )}

            {/* Manual Login Form */}
            {activeTab === 'manual' && (
              <form onSubmit={handleManualLogin} className="space-y-4">
                {errors.general && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                    <p className="text-red-600 text-sm flex items-center space-x-1">
                      <Icon name="AlertCircle" size={14} />
                      <span>{errors.general}</span>
                    </p>
                  </div>
                )}

                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                    Email / PRN / Roll No
                  </label>
                  <Input
                    id="email"
                    name="email"
                    type="text"
                    value={formData.email}
                    onChange={handleInputChange}
                    placeholder="Enter your email, PRN, or roll number"
                    className={errors.email ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}
                  />
                  {errors.email && (
                    <p className="text-red-600 text-sm mt-1 flex items-center space-x-1">
                      <Icon name="AlertCircle" size={12} />
                      <span>{errors.email}</span>
                    </p>
                  )}
                </div>

                {authMode === 'signup' && (
                  <>
                    <div>
                      <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
                        Full Name
                      </label>
                      <Input
                        id="name"
                        name="name"
                        type="text"
                        value={formData.name}
                        onChange={handleInputChange}
                        placeholder="Enter your full name"
                        className={errors.name ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}
                      />
                      {errors.name && (
                        <p className="text-red-600 text-sm mt-1 flex items-center space-x-1">
                          <Icon name="AlertCircle" size={12} />
                          <span>{errors.name}</span>
                        </p>
                      )}
                    </div>

                    <div>
                      <label htmlFor="branch" className="block text-sm font-medium text-gray-700 mb-2">
                        Branch
                      </label>
                      <Select
                        id="branch"
                        name="branch"
                        value={formData.branch}
                        onChange={handleInputChange}
                        options={branchOptions}
                        className={errors.branch ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}
                      />
                      {errors.branch && (
                        <p className="text-red-600 text-sm mt-1 flex items-center space-x-1">
                          <Icon name="AlertCircle" size={12} />
                          <span>{errors.branch}</span>
                        </p>
                      )}
                    </div>
                  </>
                )}

                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                    Password
                  </label>
                  <Input
                    id="password"
                    name="password"
                    type="password"
                    value={formData.password}
                    onChange={handleInputChange}
                    placeholder="Enter your password"
                    className={errors.password ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}
                  />
                  {errors.password && (
                    <p className="text-red-600 text-sm mt-1 flex items-center space-x-1">
                      <Icon name="AlertCircle" size={12} />
                      <span>{errors.password}</span>
                    </p>
                  )}
                </div>

                {authMode === 'signup' && (
                  <div>
                    <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                      Confirm Password
                    </label>
                    <Input
                      id="confirmPassword"
                      name="confirmPassword"
                      type="password"
                      value={formData.confirmPassword}
                      onChange={handleInputChange}
                      placeholder="Confirm your password"
                      className={errors.confirmPassword ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}
                    />
                    {errors.confirmPassword && (
                      <p className="text-red-600 text-sm mt-1 flex items-center space-x-1">
                        <Icon name="AlertCircle" size={12} />
                        <span>{errors.confirmPassword}</span>
                      </p>
                    )}
                  </div>
                )}

                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Button type="button" variant="ghost" onClick={() => setAuthMode('signin')}>Sign In</Button>
                    <Button type="button" variant="ghost" onClick={() => setAuthMode('signup')}>Sign Up</Button>
                  </div>
                  <div>
                    <Button type="button" variant="secondary" onClick={handleGoogleLogin}>Sign in with Google</Button>
                  </div>
                </div>

              </form>
            )}

            {/* OAuth Tab */}
            {activeTab === 'oauth' && (
              <div className="space-y-4">
                <Button type="button" variant="outline" onClick={handleGoogleLogin}>Continue with Google</Button>
                <Button type="button" variant="outline" onClick={handleMicrosoftLogin}>Continue with Microsoft</Button>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default Login;
